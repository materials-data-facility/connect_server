name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "*"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Check out the schema repo to package up the JSON schemae with function
    - name: Checkout schema repo
      uses: actions/checkout@v2
      with:
        repository: materials-data-facility/data-schemas
        ref: automate
        path: schemas

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r aws/requirements.txt
        pip install boto3
        pip list
    - name: Check for vulnerabilities in libraries
      run: |
        pip install safety
        pip freeze | safety check

    - name: Test with pytest
      run: |
        pip install -r aws/requirements.txt
        pip install -r aws/tests/requirements-test.txt
        PYTHONPATH=aws python -m pytest aws/tests

  publish:
    needs: test
    runs-on: ubuntu-latest

    steps:
    #credentials to connect to AWS
    - name: Configure AWS credentials from Production account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up lambda environment for changes to development branch
      if: ${{ github.event_name == 'push' && github.ref != 'refs/heads/serverless' }}
      run: |
        echo "layer_name=GlobusLayerTest" >> $GITHUB_ENV
        echo "auth_function_name=globus-auth-test" >> $GITHUB_ENV
        echo "submit_function_name=submit-dataset-test" >> $GITHUB_ENV
        echo "status_function_name=submit-status-test" >> $GITHUB_ENV

    - name: Set up lambda environment for changes to integration test branch
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/serverless' }}
      run: |
        echo "layer_name=GlobusLayer" >> $GITHUB_ENV
        echo "auth_function_name=globus-auth" >> $GITHUB_ENV
        echo "submit_function_name=submit-dataset" >> $GITHUB_ENV
        echo "status_function_name=submit-status" >> $GITHUB_ENV

    - name: Use the value
      id: step_two
      run: |
        echo "layer name ${{ env.layer_name }}"
        echo "auth_function ${{ env.auth_function_name }}"
        echo "submit_function ${{ env.submit_function_name }}"
        echo "status_function ${{ env.status_function_name }}"
        echo ${{github.ref}}

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Check out the schema repo to package up the JSON schemae with function
    - name: Checkout schema repo
      uses: actions/checkout@v2
      with:
        repository: materials-data-facility/data-schemas
        ref: automate
        path: schemas

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Create dependency layer
      run: |
         python -m pip install --upgrade pip
         mkdir python
         #install all dependencies as defined by requirements.txt in the aws directory
         pip3 install --use-deprecated=legacy-resolver  -r aws/requirements.txt -t ./python

         #zip files into current directory
         zip -r globusLayer.zip ./python
         aws lambda publish-layer-version --layer-name ${{ env.layer_name }} --zip-file fileb://./globusLayer.zip --compatible-runtimes python3.6 python3.7 > layer_info.json
         cat layer_info.json
         LAYER_VERSION=$(jq ".Version" layer_info.json)

    - name: Upload Globus Auth Function
      run: |
         cp aws/globus-auth.py ./lambda_function.py
         zip globus_auth.zip ./lambda_function.py
         rm ./lambda_function.py
         aws lambda update-function-code --function-name ${{ env.auth_function_name }} --zip-file fileb://./globus_auth.zip

    - name: Upload Submit Dataset Function
      run: |
         cp aws/submit_dataset.py ./lambda_function.py
         cp aws/*.py .
         cp aws/mdf_flow_info.json .
         zip submit-dataset.zip ./lambda_function.py ./source_id_manager.py \
             ./utils.py ./dynamo_manager.py ./automate_manager.py \
             ./globus_automate_flow.py ./flow_action.py ./organization.py \
             ./globus_auth_manager.py \
            ./mdf_flow_info.json
         zip -r submit-dataset.zip ./schemas
         rm ./lambda_function.py
         aws lambda update-function-code --function-name ${{ env.submit_function_name }} --zip-file fileb://./submit-dataset.zip

    - name: Upload Submission Status Function
      run: |
         cp aws/submit_status.py ./lambda_function.py
         cp aws/*.py .
         cp aws/mdf_flow_info.json .
         zip submit-status.zip ./lambda_function.py ./source_id_manager.py \
             ./utils.py ./dynamo_manager.py ./automate_manager.py \
             ./globus_automate_flow.py ./flow_action.py ./organization.py \
             ./globus_auth_manager.py \
             ./mdf_flow_info.json
         zip -r submit-status.zip ./schemas
         rm ./lambda_function.py
         aws lambda update-function-code --function-name ${{ env.status_function_name }} --zip-file fileb://./submit-status.zip
